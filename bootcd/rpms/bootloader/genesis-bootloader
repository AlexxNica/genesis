#!/usr/bin/env ruby

# this genesis bootloader should change rarely.  It's main goal is to load
# the config file and stage2 loader where all localizations should happen.

require 'rubygems'
require 'retryingfetcher'
require 'promptcli'
require 'json'

# Setup some pre-defined constants
GENESIS_ROOT = '/var/run/genesis'

# Fetch our stage 2 URL
PROC_CMDLINE = (File.exists?('/proc/cmdline') \
  && File.open("/proc/cmdline", 'r') { |file| file.gets }) || ''
GENESIS_MODE = PROC_CMDLINE[/GENESIS_MODE=(\S+)/, 1] \
    || ENV['GENESIS_MODE'] || 'intake'
GENESIS_CONF_URL = PROC_CMDLINE[/GENESIS_CONF_URL=(\S+)/, 1] \
    || ENV['GENESIS_CONF_URL'] || ''
GENESIS_RAID_LEVEL = PROC_CMDLINE[/GENESIS_RAID_LEVEL=(\S+)/, 1] \
    || ENV['GENESIS_RAID_LEVEL'] || ''
puts ''
puts 'Genesis operating mode is: %s' % [GENESIS_MODE]
puts 'Genesis conf URL is: %s'       % [GENESIS_CONF_URL]
puts 'Genesis raid level is: %s'     % [GENESIS_RAID_LEVEL]

genesis_conf = nil
Genesis::RetryingFetcher.get(, GENESIS_CONF_URL) do |data|
  begin genesis_config = JSON.parse(data) rescue nil end
  raise "ERROR: #{GENESIS_CONF_URL} did not contain valid json or was empty" \
    if genesis_config.nil? || genesis_config.empty?

  # allow GENESIS_ROOT to be overridden from config
  GENESIS_ROOT = genesis_config[:root] if genesis_config.has_key? :root
  GENESIS_CONF_FILE = File.join(GENESIS_ROOT, "genesis_conf.json")
  GENESIS_STAGE2_SCRIPT = File.join(GENESIS_ROOT, "stage2")

  # Create our basic directory tree
  Dir.mkdir(GENESIS_ROOT, 0755) unless File.directory? GENESIS_ROOT

  File.open(GENESIS_CONF_FILE, "w", 0444) { |file| file.puts data }
end

puts 'Genesis config file is: %s'    % [GENESIS_CONFIG_FILE]
puts 'Genesis stage2 url is: %s'     % [GENESIS_STAGE2_URL]
puts 'Genesis stage2 program is: %s' % [GENESIS_STAGE2_SCRIPT]
puts '---', ''

GENESIS_STAGE2_URL = genesis_conf[:stage2_url]

loop do
  # fetch stage 2
  Genesis::RetryingFetcher.get(, GENESIS_STAGE2_URL) do |data|
    File.open(GENESIS_STAGE2_SCRIPT, 'w', 0555) { |file| file.puts data }
  end

  # verify stage 2
  syntax_valid = File.exists?(GENESIS_STAGE2_SCRIPT) && \
    !`ruby -c #{GENESIS_STAGE2_SCRIPT}`.strip.match(/^Syntax OK$/).nil?
  break if syntax_valid

  puts ''
  try_fetching = Genesis::PromptCLI.ask "Genesis Stage 2 is corrupt. Would you like to retry?" 
  unless  try_fetching
    raise RuntimeError, msg + "Genesis Stage 2 is corrupt. Execution halted!"
  end
  puts ''
end

# setup the environment
ENV['GENESIS_ROOT']      = GENESIS_ROOT
ENV['GENESIS_CONF']      = GENESIS_CONF_FILE
ENV['GENESIS_MODE']      = GENESIS_MODE
ENV['GENESIS_RAID_LEVEL' = GENESIS_RAID_LEVEL if GENESIS_RAID_LEVEL

# Execute the stage 2
puts "\nSwitching to '" + GENESIS_ROOT + "' and executing stage 2..."
Dir::chdir(GENESIS_ROOT)
Kernel.exec('/usr/bin/env', 'ruby', GENESIS_STAGE2_SCRIPT)
raise "ERROR: exec of stage2 script '#{GENESIS_STAGE2_SCRIPT}' failed'
